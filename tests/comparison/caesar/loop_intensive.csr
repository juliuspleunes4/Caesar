# Loop-intensive benchmark for Caesar
# Usage: caesar loop_intensive.csr <iterations>

def nested_loops(n):
    total = 0
    i = 0
    while i < n:
        j = 0
        while j < 100:
            total = total + (i * j)
            j = j + 1
        i = i + 1
    return total

def simple_loop(n):
    total = 0
    i = 0
    while i < n:
        total = total + (i * i)
        i = i + 1
    return total

def main():
    # For this benchmark, we'll use a fixed value
    n = 100000  # Can be modified for different test scales
    
    # Choose algorithm based on scale
    if n <= 100000:
        result = nested_loops(n / 100)  # Scale down for nested loops
    else:
        result = simple_loop(n)
    
    # Don't print result to avoid affecting timing

# Run main function directly
main()