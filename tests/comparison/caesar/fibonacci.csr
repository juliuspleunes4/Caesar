# Fibonacci benchmark for Caesar
# Usage: caesar fibonacci.csr <n>

def fibonacci_recursive(n):
    if n <= 1:
        return n
    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)

def fibonacci_iterative(n):
    if n <= 1:
        return n
    
    a = 0
    b = 1
    i = 2
    while i <= n:
        temp = a + b
        a = b
        b = temp
        i = i + 1
    return b

def main():
    # For this benchmark, we'll use a fixed value
    # In real implementation, would parse command line args
    n = 30  # Can be modified for different test scales
    
    # Use recursive for smaller values, iterative for larger
    if n <= 35:
        result = fibonacci_recursive(n)
    else:
        result = fibonacci_iterative(n)
    
    # Don't print result to avoid affecting timing
    # print("fib(", n, ") =", result)

# Run main function directly
main()